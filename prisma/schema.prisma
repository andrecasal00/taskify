generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permissions {
  uuid            String            @id @default(uuid())
  permission      String
  description     String
  userPermissions UserPermissions[]

  @@map("tbl_permissions")
}

model Users {
  uuid                     String                    @id @default(uuid())
  name                     String
  email                    String                    @unique
  passwordHash             String                    @map("password_hash")
  profilePicture           String?                   @map("profile_picture")
  phoneNumber              String?                   @map("phone_number")
  bio                      String?
  createdAt                DateTime                  @default(now()) @map("created_at")
  updatedAt                DateTime                  @updatedAt @map("updated_at")
  deletedAt                DateTime?                 @map("deleted_at") @db.Timestamp(6)
  chatMessages             BoardChatMessages[]
  projectMembers           ProjectMembers[]
  taskComments             TaskComments[]
  taskMembers              TaskMembers[]
  userIntegration          UserIntegration?
  userNotificationSettings UserNotificationSettings?
  userPermissions          UserPermissions[]
  userSecuritySettings     UserSecuritySettings?
  userTokens               UserTokens?
  workspaces               Workspaces[]

  @@map("tbl_users")
}

model UserPermissions {
  uuid           String      @id @default(uuid())
  userUuid       String      @map("user_uuid")
  permissionUuid String      @map("permission_uuid")
  permissions    Permissions @relation(fields: [permissionUuid], references: [uuid], onDelete: Cascade)
  users          Users       @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("tbl_user_permissions")
}

model UserTokens {
  userUuid     String   @id @map("user_uuid")
  refreshToken String?  @map("refresh_token")
  issuedAt     String?  @map("issued_at")
  expiresAt    String?  @map("expires_at")
  deviceInfo   String?  @map("device_info")
  revokedAt    String?  @map("revoked_at")
  ipAddress    String?  @map("ip_address")
  updatedAt    DateTime @updatedAt @map("updated_at")
  users        Users    @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("tbl_user_tokens")
}

model UserIntegration {
  userUuid        String   @id @map("user_uuid")
  integrationType String?  @map("integration_type")
  accessToken     String?  @map("access_token")
  refreshToken    String?  @map("refresh_token")
  details         String?
  updatedAt       DateTime @updatedAt @map("updated_at")
  users           Users    @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("tbl_user_integration")
}

model UserSecuritySettings {
  userUuid         String    @id @map("user_uuid")
  twoFactorEnabled Boolean   @default(false) @map("two_factor_enabled")
  twoFactorType    String?   @default("email") @map("two_factor_type")
  backupCodes      String?   @map("backup_codes")
  lastLogin        DateTime? @map("last_login") @db.Timestamp(6)
  updatedAt        DateTime  @updatedAt @map("updated_at")
  users            Users     @relation(fields: [userUuid], references: [uuid])

  @@map("tbl_user_security_settings")
}

model UserNotificationSettings {
  userUuid               String   @id @map("user_uuid")
  emailNotifications     Boolean  @default(true) @map("email_notifications")
  pushNotifications      Boolean  @default(true) @map("push_notifications")
  inAppNotifications     Boolean  @default(true) @map("in_app_notifications")
  notifyOnMentions       Boolean  @default(true) @map("notify_on_mentions")
  notifyOnTaskAssignment Boolean  @default(true) @map("notify_task_assignment")
  digestFrequency        String   @default("daily") @map("digest_frequency")
  updatedAt              DateTime @updatedAt @map("updated_at")
  users                  Users    @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("tbl_user_notification_settings")
}

model Workspaces {
  uuid            String     @id @default(uuid())
  ownerUuid       String     @map("owner_uuid")
  name            String
  description     String?
  backgroundImage String?    @map("background_image")
  createdAt       DateTime   @default(now()) @map("created_at")
  deletedAt       DateTime?  @map("deleted_at") @db.Timestamp(6)
  projects        Projects[]
  users           Users      @relation(fields: [ownerUuid], references: [uuid], onDelete: Cascade)

  @@map("tbl_workspaces")
}

model ProjectVisibility {
  uuid        String     @id @default(uuid())
  name        String
  description String?
  projects    Projects[]

  @@map("tbl_project_visibility")
}

model ProjectPermissions {
  uuid          String           @id @default(uuid())
  name          String
  description   String?
  projectMember ProjectMembers[]

  @@map("tbl_project_permissions")
}

model Projects {
  uuid              String            @id @default(uuid())
  workspaceUuid     String            @map("workspace_uuid")
  name              String
  description       String?
  backgroundImage   String?           @map("background_image")
  visibilityUuid    String            @map("visibility_uuid")
  createdAt         DateTime          @default(now()) @map("created_at")
  deletedAt         DateTime?         @map("deleted_at") @db.Timestamp(6)
  boards            Boards[]
  projectMembers    ProjectMembers[]
  projectVisibility ProjectVisibility @relation(fields: [visibilityUuid], references: [uuid], onDelete: Cascade)
  workspace         Workspaces        @relation(fields: [workspaceUuid], references: [uuid], onDelete: Cascade)

  @@map("tbl_projects")
}

model ProjectMembers {
  uuid           String             @id @default(uuid())
  projectUuid    String             @map("project_uuid")
  userUuid       String             @map("user_uuid")
  permissionUuid String             @map("permission_uuid")
  joinedAt       DateTime           @default(now()) @map("joined_at")
  removedAt      DateTime?          @map("removed_at") @db.Timestamp(6)
  permission     ProjectPermissions @relation(fields: [permissionUuid], references: [uuid], onDelete: Cascade)
  projects       Projects           @relation(fields: [projectUuid], references: [uuid], onDelete: Cascade)
  users          Users              @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("tbl_project_members")
}

model Boards {
  uuid            String              @id @default(uuid())
  projectUuid     String              @map("project_uuid")
  backgroundImage String?             @map("background_image")
  createdAt       DateTime            @default(now()) @map("created_at")
  deletedAt       DateTime?           @map("deleted_at") @db.Timestamp(6)
  name            String
  chatMessages    BoardChatMessages[]
  projects        Projects            @relation(fields: [projectUuid], references: [uuid], onDelete: Cascade)
  tasks           Tasks[]

  @@map("tbl_boards")
}

model Tasks {
  uuid            String         @id @default(uuid())
  boardUuid       String         @map("board_uuid")
  backgroundImage String?        @map("background_image")
  title           String
  description     String?
  dueDate         DateTime?      @db.Timestamp(6)
  tagsList        String?
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  deletedAt       DateTime?      @map("deleted_at") @db.Timestamp(6)
  taskComments    TaskComments[]
  taskMembers     TaskMembers[]
  boards          Boards         @relation(fields: [boardUuid], references: [uuid], onDelete: Cascade)

  @@map("tbl_tasks")
}

model TaskMembers {
  uuid             String    @id @default(uuid())
  taksUuid         String    @map("task_uuid")
  associatedToUuid String    @map("associated_to_uuid")
  joinedAt         DateTime  @default(now()) @map("joined_at")
  removedAt        DateTime? @map("removed_at") @db.Timestamp(6)
  users            Users     @relation(fields: [associatedToUuid], references: [uuid], onDelete: Cascade)
  tasks            Tasks     @relation(fields: [taksUuid], references: [uuid], onDelete: Cascade)

  @@map("tbl_task_members")
}

model TaskComments {
  uuid      String    @id @default(uuid())
  taksUuid  String    @map("task_uuid")
  userUuid  String    @map("user_uuid")
  message   String
  createdAt DateTime  @default(now()) @map("created_at")
  removedAt DateTime? @map("removed_at") @db.Timestamp(6)
  tasks     Tasks     @relation(fields: [taksUuid], references: [uuid], onDelete: Cascade)
  users     Users     @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("tbl_task_comments")
}

model BoardChatMessages {
  uuid      String    @id @default(uuid())
  boardUuid String    @map("board_uuid")
  userUuid  String    @map("user_uuid")
  message   String
  createdAt DateTime  @default(now()) @map("created_at")
  removedAt DateTime? @map("removed_at") @db.Timestamp(6)
  tasks     Boards    @relation(fields: [boardUuid], references: [uuid], onDelete: Cascade)
  users     Users     @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@map("tbl_board_chat_messages")
}
